name: Databricks ETL CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

  deploy-to-databricks:
    needs: ci-setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install required libraries
        run: pip install -r requirements.txt

      - name: Check Databricks CLI version
        run: databricks --version

      - name: Configure Databricks CLI
        run: |
          mkdir -p ~/.databricks
          echo "[DEFAULT]" > ~/.databricks/config
          echo "host = ${{ secrets.DATABRICKS_HOST }}" >> ~/.databricks/config
          echo "token = ${{ secrets.DATABRICKS_TOKEN }}" >> ~/.databricks/config

      - name: Verify Databricks CLI config
        run: |
          cat ~/.databricks/config

      - name: List root workspace
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: databricks workspace list /

      - name: Deploy notebook to workspace
        env:
              DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
              DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks workspace import --language PYTHON --format SOURCE --overwrite notebooks/etl_pipeline.py /Workspace/etl_pipeline.py
      
      - name: Create or update Databricks job
        id: create-or-update
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          set -e
          echo "Checking for existing job ID..."
          JOB_ID=$(databricks jobs list --output JSON | jq -r '.jobs[] | select(.settings.name=="daily-etl-pipeline") | .job_id')

          if [ -z "$JOB_ID" ]; then
            echo "Job not found. Creating..."
            CREATE_OUTPUT=$(databricks jobs create --json-file .databricks/config/job-config.json --version 2.1)
            JOB_ID=$(echo "$CREATE_OUTPUT" | jq -r '.job_id')
            echo "Created job with ID: $JOB_ID"
          else
            echo "Job exists with ID: $JOB_ID. Resetting..."
            databricks jobs reset --job-id $JOB_ID --json-file .databricks/config/job-config.json
          fi

          # Save JOB_ID for next step
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Run ETL job
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          echo "Running job ID: ${{ steps.create-or-update.outputs.job_id }}"
          databricks jobs run-now --job-id ${{ steps.create-or-update.outputs.job_id }}

      - name: Test Databricks connectivity
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          DATABRICKS_HTTP_PATH: ${{ secrets.DATABRICKS_HTTP_PATH }}
        run: |
          echo "Host: $DATABRICKS_HOST"
          echo "Path: $DATABRICKS_HTTP_PATH"
          python -c "
          import os
          from databricks import sql

          try:
              conn = sql.connect(
                  server_hostname=os.getenv('DATABRICKS_HOST'),
                  http_path=os.getenv('DATABRICKS_HTTP_PATH'),
                  access_token=os.getenv('DATABRICKS_TOKEN')
              )
              print('Connection OK')
              conn.close()
          except Exception as e:
              print('Failed:', e)
          "
      - name: Run ETL Tests with Pytest
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          DATABRICKS_HTTP_PATH: ${{ secrets.DATABRICKS_HTTP_PATH }}
        run: |
          pip install -r requirements.txt
          pytest tests/ -s -v